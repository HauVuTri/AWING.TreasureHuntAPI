// <auto-generated />
using System;
using AWING.TreasureHuntAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AWING.TreasureHuntAPI.Migrations
{
    [DbContext(typeof(TreasureHuntDbContext))]
    [Migration("20240813040929_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("result_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<DateTime?>("CalculatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("calculated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("FuelUsed")
                        .HasPrecision(10, 5)
                        .HasColumnType("double")
                        .HasColumnName("fuel_used");

                    b.Property<int?>("MapId")
                        .HasColumnType("int")
                        .HasColumnName("map_id");

                    b.HasKey("ResultId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MapId" }, "map_id");

                    b.ToTable("results", (string)null);
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleName" }, "role_name")
                        .IsUnique();

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.TreasureCell", b =>
                {
                    b.Property<int>("CellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cell_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CellId"));

                    b.Property<int>("ChestNumber")
                        .HasColumnType("int")
                        .HasColumnName("chest_number");

                    b.Property<int>("ColNum")
                        .HasColumnType("int")
                        .HasColumnName("col_num");

                    b.Property<int?>("MapId")
                        .HasColumnType("int")
                        .HasColumnName("map_id");

                    b.Property<int>("RowNum")
                        .HasColumnType("int")
                        .HasColumnName("row_num");

                    b.HasKey("CellId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MapId" }, "map_id")
                        .HasDatabaseName("map_id1");

                    b.ToTable("treasure_cells", (string)null);
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.TreasureMap", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("map_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MapId"));

                    b.Property<int>("Cols")
                        .HasColumnType("int")
                        .HasColumnName("cols_count");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("P")
                        .HasColumnType("int")
                        .HasColumnName("p");

                    b.Property<int>("Rows")
                        .HasColumnType("int")
                        .HasColumnName("rows_count");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("MapId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("treasure_maps", (string)null);
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.Result", b =>
                {
                    b.HasOne("AWING.TreasureHuntAPI.Models.TreasureMap", "TreasureMap")
                        .WithMany("Results")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("results_ibfk_1");

                    b.Navigation("TreasureMap");
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.TreasureCell", b =>
                {
                    b.HasOne("AWING.TreasureHuntAPI.Models.TreasureMap", "TreasureMap")
                        .WithMany("TreasureCells")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("treasure_cells_ibfk_1");

                    b.Navigation("TreasureMap");
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.TreasureMap", b =>
                {
                    b.HasOne("AWING.TreasureHuntAPI.Models.User", "User")
                        .WithMany("TreasureMaps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("treasure_maps_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("AWING.TreasureHuntAPI.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_roles_ibfk_2");

                    b.HasOne("AWING.TreasureHuntAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_roles_ibfk_1");
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.TreasureMap", b =>
                {
                    b.Navigation("Results");

                    b.Navigation("TreasureCells");
                });

            modelBuilder.Entity("AWING.TreasureHuntAPI.Models.User", b =>
                {
                    b.Navigation("TreasureMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
